@use "../packages/dawn-styles/src/_functions.scss" as *;

// color
@mixin color($name, $value) {
  @include val("color-#{$name}", $value);
}

:root {
  @include color(standard-foreground, rgba(25, 32, 34, 1));
  @include color(standard-background, rgba(255, 255, 255, 1));
  @include color(standard-border, rgba(25, 32, 34, 0.15));
  @include color(alt-foreground, rgba(55, 62, 64, 1));
  @include color(alt-background, rgba(248, 250, 251, 1));
  @include color(alt-border, rgba(55, 62, 64, 0.3));
  @include color(muted-foreground, rgba(95, 102, 104, 1));
  @include color(muted-background, rgb(211, 215, 219));
  @include color(muted-border, rgba(95, 102, 104, 0.3));
  @include color(success-foreground, rgba(48, 121, 3, 1));
  @include color(success-background, rgba(48, 121, 3, 0.12));
  @include color(success-border, rgba(48, 121, 3, 1));
  @include color(warning-foreground, rgba(152, 103, 2, 1));
  @include color(warning-background, rgba(152, 103, 2, 0.24));
  @include color(warning-border, rgba(152, 103, 2, 1));
  @include color(error-foreground, rgba(152, 2, 53, 1));
  @include color(error-background, rgba(152, 2, 53, 0.12));
  @include color(error-border, rgba(152, 2, 53, 1));
  @include color(info-foreground, rgba(0, 97, 254, 1));
  @include color(info-background, rgba(0, 97, 254, 0.12));
  @include color(info-border, rgba(0, 97, 254, 1));

  @include color(core-transparent, rgba(0, 0, 0, 0));
  @include color(core-link, rgba(0, 97, 254, 1));
  @include color(core-link-alt, rgb(15, 93, 218));
  @include color(core-link-muted, rgb(15, 78, 181));
  @include color(core-accent, rgb(85, 99, 193));
  @include color(core-accent-alt, rgb(59, 70, 142));
  @include color(core-accent-muted, rgb(37, 46, 104));
  @include color(opacity-1, rgba(162, 156, 184, 0.12));
  @include color(opacity-2, rgba(162, 156, 184, 0.24));
  @include color(opacity-3, rgba(162, 156, 183, 0.32));
}

// typography
@mixin font-family($name, $value) {
  @include val(font-family-#{$name}, $value);
}

@mixin font-size($name, $value) {
  @include val(font-size-#{$name}, $value);
}

@mixin font-weight($name, $value) {
  @include val(font-weight-#{$name}, $value);
}

@mixin line-height($name, $value) {
  @include val(leading-#{$name}, $value);
}

@mixin letter-spacing($name, $value) {
  @include val(tracking-#{$name}, $value);
}

:root {
  @include font-family(
    body-sans,
    'ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"'
  );
  @include font-family(body-mono, monospace);
  @include font-size(body-xsmall, 0.625rem);
  @include font-size(body-small, 0.75rem);
  @include font-size(body-standard, 0.875rem);
  @include font-size(body-medium, 1rem);
  @include font-size(body-large, 1.125rem);
  @include font-size(body-xlarge, 1.25rem);
  @include font-size(display-small, 1rem);
  @include font-size(display-medium, 1.3125rem);
  @include font-size(display-large, 1.5rem);
  @include font-size(display-xlarge, 1.6875rem);
  @include font-weight(regular, 400);
  @include font-weight(medium, 500);
  @include font-weight(semibold, 600);
  @include font-weight(bold, 700);
  @include line-height(none, 1);
  @include line-height(tighter, 1rem);
  @include line-height(tight, 1.25rem);
  @include line-height(standard, 1.5rem);
  @include line-height(sung, 1.75rem);
  @include line-height(relaxed, 2rem);
  @include line-height(loose, 2.25rem);
  @include line-height(looser, 2.5rem);
  @include line-height(loosest, 2.75rem);
  @include letter-spacing(tighter, -0.05em);
  @include letter-spacing(tight, -0.025em);
  @include letter-spacing(standard, 0em);
  @include letter-spacing(wide, 0.025em);
  @include letter-spacing(wider, 0.05em);
  @include letter-spacing(widest, 0.1em);
}

// spacing
@mixin spacing($name, $value) {
  @include val(spacing-#{$name}, $value);
}

:root {
  @include spacing(0, 0);
  @include spacing("0-25", 0.0625rem);
  @include spacing("0-5", 0.125rem);
  @include spacing(1, 0.25rem);
  @include spacing(2, 0.5rem);
  @include spacing(3, 0.75rem);
  @include spacing(4, 1rem);
  @include spacing(5, 1.25rem);
  @include spacing(6, 1.5rem);
  @include spacing(8, 2rem);
  @include spacing(10, 2.5rem);
  @include spacing(12, 3rem);
  @include spacing(16, 4rem);
  @include spacing(20, 5rem);
  @include spacing(24, 6rem);
  @include spacing(28, 7rem);
  @include spacing(32, 8rem);
}

// border and shadow
@mixin border($name, $value) {
  @include val(border-#{$name}, $value);
}

@mixin border-radius($name, $value) {
  @include val(border-radius-#{$name}, $value);
}

:root {
  @include val(elevation-stroke, 0 0 0 1px rgba(var(--di--color-standard-foreground), 0.08));
  @include val(
    elevation-low,
    "0px 8px 32px rgba(25, 32, 34, 0.04), 0px 8px 16px rgba(25, 32, 34, 0.04), 0px 4px 8px rgba(25, 32, 34, 0.04), 0px 2px 4px rgba(25, 32, 34, 0.03), 0px 1px 2px rgba(25, 32, 34, 0.03)"
  );
  @include val(
    elevation-medium,
    "0px 16px 72px rgba(25, 32, 34, 0.04), 0px 32px 48px rgba(25, 32, 34, 0.04), 0px 16px 32px rgba(25, 32, 34, 0.04), 0px 8px 24px rgba(25, 32, 34, 0.03), 0px 4px 16px rgba(25, 32, 34, 0.03), 0px 2px 8px rgba(25, 32, 34, 0.03), 0px 1px 4px rgba(25, 32, 34, 0.03)"
  );
  @include val(
    elevation-high,
    "0px 16px 72px rgba(25, 32, 34, 0.04), 0px 32px 48px rgba(25, 32, 34, 0.04), 0px 16px 32px rgba(25, 32, 34, 0.04), 0px 8px 24px rgba(25, 32, 34, 0.03), 0px 4px 16px rgba(25, 32, 34, 0.03), 0px 2px 8px rgba(25, 32, 34, 0.03), 0px 1px 4px rgba(25, 32, 34, 0.03)"
  );

  @include val(
    focus-ring,
    "0 0 0 0.125rem var(--di--color-standard-background), 0 0 0 0.1875rem var(--di--color-alt-foreground)"
  );

  @include border(standard, 0.0625rem solid color(standard-border));
  @include border(alt, 0.0625rem solid color(alt-border));
  @include border(muted, 0.0625rem solid color(muted-border));
  @include border(success, 0.0625rem solid color(success-border));
  @include border(warning, 0.0625rem solid color(warning-border));
  @include border(error, 0.0625rem solid color(error-border));
  @include border(info, 0.0625rem solid color(info-border));
  @include border(accent, 0.0625rem solid color(core-accent));
  @include border(interactive, 0.0625rem solid color(standard-foreground));
  @include border(transparent, 0.0625rem solid color(core-transparent));

  @include border-radius(small, 0.125rem);
  @include border-radius(standard, 0.25rem);
  @include border-radius(medium, 0.5rem);
  @include border-radius(large, 0.75rem);
  @include border-radius(rounded, 9999px);

  @include border-radius(button, border-radius(standard));
  @include border-radius(input, border-radius(standard));
  @include border-radius(card, border-radius(medium));
}

// layout
@mixin z-index($level, $value) {
  @include val(z-#{$level}, $value);
}

:root {
  @include z-index(1, 10);
  @include z-index(2, 40);
  @include z-index(3, 51);
  @include z-index(4, 52);
  @include z-index(5, 53);
  @include z-index(6, 54);
  @include z-index(7, 55);
  @include z-index(8, 56);
  @include z-index(9, 57);
  @include z-index(10, 58);
  @include z-index(11, 59);
  @include z-index(12, 60);
}

// easing and animation
:root {
  @include val(easing-linear, "linear");
  @include val(easing-enter, "cubic-bezier(0, 0.6, 0, 1)");
  @include val(easing-leave, "cubic-bezier(1, 0, 1, 0.5)");
  @include val(easing-transition, "cubic-bezier(0.66, 0, 0, 1)");
  @include val(duration-faster, 125ms);
  @include val(duration-fast, 330ms);
  @include val(duration-slow, 710ms);
  @include val(duration-slower, 1000ms);
}

// breakpoints
$min: (
  "sm": 640px,
  "md": 960px,
  "lg": 1280px,
  "xl": 1680px
) !default;

$max: (
  "xs": 639.98px,
  "sm": 959.98px,
  "md": 1279.98px,
  "lg": 1679.98px
) !default;

:root {
  @include val(breakpoint-xs-max, map-get($max, xs));
  @include val(breakpoint-sm-min, map-get($min, sm));
  @include val(breakpoint-sm-max, map-get($max, sm));
  @include val(breakpoint-md-min, map-get($min, md));
  @include val(breakpoint-md-max, map-get($max, md));
  @include val(breakpoint-lg-min, map-get($min, lg));
  @include val(breakpoint-lg-max, map-get($max, lg));
  @include val(breakpoint-xl-min, map-get($min, xl));
}
